<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app-mobile/app-mobile/src/main/java/com/example/app_mobile/ui/screens/management/ProjectDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app-mobile/app-mobile/src/main/java/com/example/app_mobile/ui/screens/management/ProjectDetailScreen.kt" />
              <option name="originalContent" value="package com.example.app_mobile.ui.screens.management&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.material3.Tab&#10;import androidx.compose.material3.TabRow&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.*&#10;import com.example.app_mobile.data.repository.ManagementRepository&#10;import com.example.app_mobile.data.repository.CronogramaRepository&#10;import androidx.compose.runtime.collectAsState&#10;&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Image&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Scaffold&#10;&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.width&#10;&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.ui.text.font.FontStyle&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.material3.Card&#10;&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material3.Divider&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.CheckCircle&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.DatePickerDialog&#10;import androidx.compose.material3.rememberDatePickerState&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.app_mobile.ui.screens.cronograma.CronogramaViewModel&#10;import com.example.shared_domain.model.TaskCategory&#10;import com.example.shared_domain.model.TaskPriority&#10;import com.example.shared_domain.model.ScheduleTask&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.material3.LinearProgressIndicator&#10;import androidx.compose.material3.Slider&#10;import androidx.compose.material3.DropdownMenu&#10;import androidx.compose.material3.DropdownMenuItem&#10;import java.util.UUID&#10;import com.example.app_mobile.ui.screens.cronograma.components.CronogramaTimelineView&#10;import com.example.app_mobile.ui.screens.cronograma.components.ProjectPhaseSection&#10;import com.example.shared_domain.model.ProjectStatus&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.net.Uri&#10;import android.provider.OpenableColumns&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.material3.rememberDatePickerState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.asImageBitmap&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.core.net.toFile&#10;import java.io.InputStream&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;import android.util.Base64&#10;import android.graphics.BitmapFactory&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.CircularProgressIndicator&#10;&#10;// Modelo simple para plano&#10;@kotlinx.serialization.Serializable&#10;data class SimpleBlueprint(&#10;    val id: String = &quot;&quot;,&#10;    val projectId: String = &quot;&quot;,&#10;    val name: String = &quot;&quot;,&#10;    val type: String = &quot;&quot;, // &quot;image&quot; o &quot;pdf&quot;&#10;    val base64: String = &quot;&quot;,&#10;    val uploadDate: String = &quot;&quot;,&#10;    val version: String = &quot;&quot;,&#10;    val scale: String = &quot;&quot;,&#10;    val planType: String = &quot;&quot;&#10;)&#10;&#10;@Composable&#10;fun ProjectDetailScreen(&#10;    projectId: String,&#10;    managementRepository: ManagementRepository,&#10;    cronogramaRepository: CronogramaRepository,&#10;    // blueprintRepository: BlueprintRepository // Si tienes uno&#10;) {&#10;    var selectedTab by remember { mutableStateOf(0) }&#10;    val tabTitles = listOf(&quot;Información General&quot;, &quot;Cronograma&quot;, &quot;Planos&quot;)&#10;    var showAddTaskDialog by remember { mutableStateOf(false) }&#10;    var showAddBlueprintDialog by remember { mutableStateOf(false) }&#10;&#10;    // Inyectar el ViewModel de cronograma&#10;    val cronogramaViewModel: CronogramaViewModel = viewModel()&#10;&#10;    Scaffold(&#10;    ) { paddingValues -&gt;&#10;        Column(modifier = Modifier.padding(paddingValues)) {&#10;            TabRow(selectedTabIndex = selectedTab) {&#10;                tabTitles.forEachIndexed { index, title -&gt;&#10;                    Tab(&#10;                        selected = selectedTab == index,&#10;                        onClick = { selectedTab = index },&#10;                        text = { Text(title) }&#10;                    )&#10;                }&#10;            }&#10;            when (selectedTab) {&#10;                0 -&gt; ProjectGeneralInfoTab(projectId, managementRepository)&#10;                1 -&gt; ProjectScheduleTab(&#10;                    projectId = projectId,&#10;                    repository = cronogramaRepository,&#10;                    onCreateSchedule = { name, desc, start, end -&gt;&#10;                        cronogramaViewModel.createSchedule(&#10;                            projectId = projectId,&#10;                            name = name,&#10;                            description = desc,&#10;                            startDate = start,&#10;                            endDate = end,&#10;                            status = com.example.shared_domain.model.ProjectStatus.DESIGN&#10;                        )&#10;                    },&#10;                    onAddTask = { task -&gt;&#10;                        cronogramaViewModel.addTask(projectId, task)&#10;                    },&#10;                    onUpdateTaskStatus = { task, newStatus -&gt;&#10;                        cronogramaViewModel.updateTaskStatus(projectId, task, newStatus)&#10;                    }&#10;                )&#10;                2 -&gt; ProjectBlueprintsTab(projectId /*, blueprintRepository */)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Diálogo para agregar tarea&#10;    if (showAddTaskDialog) {&#10;        var taskName by remember { mutableStateOf(&quot;&quot;) }&#10;        var taskDescription by remember { mutableStateOf(&quot;&quot;) }&#10;        AlertDialog(&#10;            onDismissRequest = { showAddTaskDialog = false },&#10;            title = { Text(&quot;Agregar Nueva Tarea&quot;) },&#10;            text = {&#10;                Column {&#10;                    OutlinedTextField(&#10;                        value = taskName,&#10;                        onValueChange = { taskName = it },&#10;                        label = { Text(&quot;Nombre de la tarea&quot;) }&#10;                    )&#10;                    OutlinedTextField(&#10;                        value = taskDescription,&#10;                        onValueChange = { taskDescription = it },&#10;                        label = { Text(&quot;Descripción&quot;) }&#10;                    )&#10;                }&#10;            },&#10;            confirmButton = {&#10;                TextButton(onClick = {&#10;                    // TODO: Lógica para guardar la tarea&#10;                    showAddTaskDialog = false&#10;                }) {&#10;                    Text(&quot;Guardar&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showAddTaskDialog = false }) {&#10;                    Text(&quot;Cancelar&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;    // Diálogo para agregar plano&#10;    if (showAddBlueprintDialog) {&#10;        var blueprintName by remember { mutableStateOf(&quot;&quot;) }&#10;        var blueprintDescription by remember { mutableStateOf(&quot;&quot;) }&#10;        AlertDialog(&#10;            onDismissRequest = { showAddBlueprintDialog = false },&#10;            title = { Text(&quot;Agregar Nuevo Plano&quot;) },&#10;            text = {&#10;                Column {&#10;                    OutlinedTextField(&#10;                        value = blueprintName,&#10;                        onValueChange = { blueprintName = it },&#10;                        label = { Text(&quot;Nombre del plano&quot;) }&#10;                    )&#10;                    OutlinedTextField(&#10;                        value = blueprintDescription,&#10;                        onValueChange = { blueprintDescription = it },&#10;                        label = { Text(&quot;Descripción&quot;) }&#10;                    )&#10;                }&#10;            },&#10;            confirmButton = {&#10;                TextButton(onClick = {&#10;                    // TODO: Lógica para guardar el plano&#10;                    showAddBlueprintDialog = false&#10;                }) {&#10;                    Text(&quot;Guardar&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showAddBlueprintDialog = false }) {&#10;                    Text(&quot;Cancelar&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProjectGeneralInfoTab(projectId: String, repository: ManagementRepository) {&#10;    val projectsState by repository.projects.collectAsState()&#10;    val project = projectsState[projectId]&#10;    if (project != null) {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(vertical = 16.dp, horizontal = 12.dp),&#10;            shape = RoundedCornerShape(24.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;        ) {&#10;            Column(modifier = Modifier.padding(24.dp)) {&#10;                Row(verticalAlignment = Alignment.CenterVertically) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Home,&#10;                        contentDescription = null,&#10;                        tint = MaterialTheme.colorScheme.primary,&#10;                        modifier = Modifier.size(40.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;                    Column {&#10;                        Text(&#10;                            text = project.name,&#10;                            fontSize = 22.sp,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.onSurface&#10;                        )&#10;                        Text(&#10;                            text = project.status.name,&#10;                            fontSize = 14.sp,&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;                    }&#10;                }&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Text(&#10;                    text = project.description ?: &quot;Sin descripción&quot;,&#10;                    fontSize = 16.sp,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Divider()&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Column {&#10;                        Text(&quot;Cliente&quot;, fontWeight = FontWeight.SemiBold, fontSize = 14.sp)&#10;                        Text(project.client.name, fontSize = 15.sp)&#10;                    }&#10;                    Column {&#10;                        Text(&quot;Gestor&quot;, fontWeight = FontWeight.SemiBold, fontSize = 14.sp)&#10;                        Text(project.projectManager.name, fontSize = 15.sp)&#10;                    }&#10;                }&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Column {&#10;                        Text(&quot;Dirección&quot;, fontWeight = FontWeight.SemiBold, fontSize = 14.sp)&#10;                        Text(project.location.fullAddress, fontSize = 15.sp)&#10;                    }&#10;                    Column {&#10;                        Text(&quot;Ciudad&quot;, fontWeight = FontWeight.SemiBold, fontSize = 14.sp)&#10;                        Text(project.location.city, fontSize = 15.sp)&#10;                    }&#10;                }&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Column {&#10;                        Text(&quot;Presupuesto&quot;, fontWeight = FontWeight.SemiBold, fontSize = 14.sp)&#10;                        Text(project.budget?.formatted() ?: &quot;-&quot;, fontSize = 15.sp)&#10;                    }&#10;                    Column {&#10;                        Text(&quot;Progreso&quot;, fontWeight = FontWeight.SemiBold, fontSize = 14.sp)&#10;                        Text(&quot;${project.progressPercentage}%&quot;, fontSize = 15.sp)&#10;                    }&#10;                }&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Column {&#10;                        Text(&quot;Inicio&quot;, fontWeight = FontWeight.SemiBold, fontSize = 14.sp)&#10;                        Text(project.timeline.startDate, fontSize = 15.sp)&#10;                    }&#10;                    Column {&#10;                        Text(&quot;Entrega&quot;, fontWeight = FontWeight.SemiBold, fontSize = 14.sp)&#10;                        Text(project.timeline.endDate, fontSize = 15.sp)&#10;                    }&#10;                }&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Column {&#10;                        Text(&quot;Versión&quot;, fontWeight = FontWeight.SemiBold, fontSize = 14.sp)&#10;                        Text(&quot;${project.metadata.version}&quot;, fontSize = 15.sp)&#10;                    }&#10;                    Column {&#10;                        Text(&quot;Última actualización&quot;, fontWeight = FontWeight.SemiBold, fontSize = 14.sp)&#10;                        Text(project.metadata.updatedAt, fontSize = 15.sp)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    } else {&#10;        Text(&quot;Cargando información del proyecto...&quot;)&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProjectScheduleTab(&#10;    projectId: String,&#10;    repository: CronogramaRepository,&#10;    onCreateSchedule: (String, String, String, String) -&gt; Unit = { _, _, _, _ -&gt; },&#10;    onAddTask: (ScheduleTask) -&gt; Unit = {},&#10;    onUpdateTaskStatus: (ScheduleTask, String) -&gt; Unit = { _, _ -&gt; }&#10;) {&#10;    val schedulesState by repository.schedules.collectAsState()&#10;    val allTasksState by repository.tasks.collectAsState()&#10;    val schedule = schedulesState.values.find { it.projectId == projectId }&#10;    val tasks = allTasksState.values.filter { it.projectId == projectId }&#10;    var showCreateDialog by remember { mutableStateOf(false) }&#10;    var showAddTaskDialog by remember { mutableStateOf(false) }&#10;    if (schedule != null) {&#10;        val completedTasks = tasks.count { it.status == &quot;ENTREGA&quot; || it.status == &quot;COMPLETADO&quot; }&#10;        val progress = if (tasks.isNotEmpty()) completedTasks.toFloat() / tasks.size else 0f&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.2f))&#10;        ) {&#10;            Column(modifier = Modifier.padding(16.dp)) {&#10;                Row(verticalAlignment = Alignment.CenterVertically) {&#10;                    Icon(Icons.Default.DateRange, contentDescription = null, tint = MaterialTheme.colorScheme.primary)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(schedule.name, fontWeight = FontWeight.Bold, fontSize = 20.sp)&#10;                }&#10;                Text(&quot;${schedule.startDate} a ${schedule.endDate}&quot;, fontSize = 14.sp, color = MaterialTheme.colorScheme.primary)&#10;                schedule.description?.let {&#10;                    Text(it, fontSize = 13.sp, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                }&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                LinearProgressIndicator(progress = { progress }, modifier = Modifier.fillMaxWidth(), color = MaterialTheme.colorScheme.primary)&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween&#10;                ) {&#10;                    Text(&quot;Progreso: ${(progress * 100).toInt()}%&quot;, fontSize = 14.sp, color = MaterialTheme.colorScheme.primary)&#10;                    Text(&quot;Tareas: ${tasks.size}&quot;, fontSize = 14.sp, color = MaterialTheme.colorScheme.primary)&#10;                }&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                // Mostrar mensaje si no hay tareas&#10;                if (tasks.isEmpty()) {&#10;                    Text(&#10;                        &quot;No hay tareas asociadas a este cronograma.&quot;,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        fontStyle = FontStyle.Italic,&#10;                        modifier = Modifier.padding(vertical = 24.dp)&#10;                    )&#10;                } else {&#10;                    // Agrupar tareas por fase y mostrar con swipe&#10;                    val tasksByPhase = tasks.groupBy { mapTaskCategoryToProjectStatus(it.category) }.toSortedMap(compareBy { it.ordinal })&#10;                    tasksByPhase.forEach { (phase, phaseTasks) -&gt;&#10;                        ProjectPhaseSection(&#10;                            phase = phase,&#10;                            tasks = phaseTasks,&#10;                            onTaskClick = {},&#10;                            onTaskStatusUpdate = onUpdateTaskStatus,&#10;                            onTaskProgressUpdate = { _, _ -&gt; }&#10;                        )&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        // Botón flotante para agregar tarea (siempre visible aunque no haya tareas)&#10;        FloatingActionButton(&#10;            onClick = { showAddTaskDialog = true },&#10;            containerColor = MaterialTheme.colorScheme.primary,&#10;            modifier = Modifier&#10;                .padding(24.dp)&#10;        ) {&#10;            Icon(Icons.Default.Add, contentDescription = &quot;Agregar tarea&quot;, tint = Color.White)&#10;        }&#10;        if (showAddTaskDialog) {&#10;            AddTaskDialog(&#10;                onDismiss = { showAddTaskDialog = false },&#10;                onCreate = { task -&gt;&#10;                    onAddTask(task)&#10;                    showAddTaskDialog = false&#10;                },&#10;                projectId = projectId&#10;            )&#10;        }&#10;    } else {&#10;        Text(&quot;No hay cronograma para este proyecto.&quot;, modifier = Modifier.padding(16.dp))&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CreateScheduleDialog(&#10;    onDismiss: () -&gt; Unit,&#10;    onCreate: (String, String, String, String) -&gt; Unit&#10;) {&#10;    var name by remember { mutableStateOf(&quot;&quot;) }&#10;    var desc by remember { mutableStateOf(&quot;&quot;) }&#10;    var startDate by remember { mutableStateOf(&quot;&quot;) }&#10;    var endDate by remember { mutableStateOf(&quot;&quot;) }&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { Text(&quot;Nuevo Cronograma&quot;) },&#10;        text = {&#10;            Column {&#10;                OutlinedTextField(&#10;                    value = name,&#10;                    onValueChange = { name = it },&#10;                    label = { Text(&quot;Nombre&quot;) },&#10;                    singleLine = true&#10;                )&#10;                OutlinedTextField(&#10;                    value = desc,&#10;                    onValueChange = { desc = it },&#10;                    label = { Text(&quot;Descripción&quot;) },&#10;                    singleLine = false&#10;                )&#10;                OutlinedTextField(&#10;                    value = startDate,&#10;                    onValueChange = { startDate = it },&#10;                    label = { Text(&quot;Fecha inicio (yyyy-MM-dd)&quot;) },&#10;                    singleLine = true,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(top = 8.dp)&#10;                )&#10;                OutlinedTextField(&#10;                    value = endDate,&#10;                    onValueChange = { endDate = it },&#10;                    label = { Text(&quot;Fecha fin (yyyy-MM-dd)&quot;) },&#10;                    singleLine = true,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(top = 8.dp)&#10;                )&#10;            }&#10;        },&#10;        confirmButton = {&#10;            TextButton(&#10;                onClick = {&#10;                    if (name.isNotBlank() &amp;&amp; startDate.isNotBlank() &amp;&amp; endDate.isNotBlank()) {&#10;                        onCreate(name, desc, startDate, endDate)&#10;                    }&#10;                },&#10;                enabled = name.isNotBlank() &amp;&amp; startDate.isNotBlank() &amp;&amp; endDate.isNotBlank()&#10;            ) { Text(&quot;Crear&quot;) }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) { Text(&quot;Cancelar&quot;) }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun AddTaskDialog(&#10;    onDismiss: () -&gt; Unit,&#10;    onCreate: (ScheduleTask) -&gt; Unit,&#10;    projectId: String&#10;) {&#10;    var name by remember { mutableStateOf(&quot;&quot;) }&#10;    var desc by remember { mutableStateOf(&quot;&quot;) }&#10;    var startDate by remember { mutableStateOf(&quot;&quot;) }&#10;    var endDate by remember { mutableStateOf(&quot;&quot;) }&#10;    var status by remember { mutableStateOf(&quot;DISEÑO&quot;) }&#10;    val statusOptions = listOf(&quot;DISEÑO&quot;, &quot;REVISION_PERMISOS&quot;, &quot;CONSTRUCCION&quot;, &quot;ENTREGA&quot;)&#10;    var progress by remember { mutableStateOf(0f) }&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { Text(&quot;Nueva Tarea&quot;) },&#10;        text = {&#10;            Column {&#10;                OutlinedTextField(&#10;                    value = name,&#10;                    onValueChange = { name = it },&#10;                    label = { Text(&quot;Nombre&quot;) },&#10;                    singleLine = true&#10;                )&#10;                OutlinedTextField(&#10;                    value = desc,&#10;                    onValueChange = { desc = it },&#10;                    label = { Text(&quot;Descripción&quot;) },&#10;                    singleLine = false&#10;                )&#10;                OutlinedTextField(&#10;                    value = startDate,&#10;                    onValueChange = { startDate = it },&#10;                    label = { Text(&quot;Fecha inicio (yyyy-MM-dd)&quot;) },&#10;                    singleLine = true&#10;                )&#10;                OutlinedTextField(&#10;                    value = endDate,&#10;                    onValueChange = { endDate = it },&#10;                    label = { Text(&quot;Fecha fin (yyyy-MM-dd)&quot;) },&#10;                    singleLine = true&#10;                )&#10;                // Selector de estado/fase&#10;                DropdownMenuBox(&#10;                    options = statusOptions,&#10;                    selectedOption = status,&#10;                    onOptionSelected = { status = it },&#10;                    label = &quot;Fase/Estado&quot;&#10;                )&#10;                // Barra de progreso individual&#10;                Text(&quot;Progreso: ${(progress * 100).toInt()}%&quot;, fontSize = 13.sp)&#10;                Slider(&#10;                    value = progress,&#10;                    onValueChange = { progress = it },&#10;                    valueRange = 0f..1f,&#10;                    steps = 3&#10;                )&#10;            }&#10;        },&#10;        confirmButton = {&#10;            TextButton(&#10;                onClick = {&#10;                    if (name.isNotBlank() &amp;&amp; startDate.isNotBlank() &amp;&amp; endDate.isNotBlank()) {&#10;                        onCreate(&#10;                            ScheduleTask(&#10;                                id = UUID.randomUUID().toString(),&#10;                                name = name,&#10;                                description = desc,&#10;                                startDate = startDate,&#10;                                endDate = endDate,&#10;                                progress = progress.toDouble(),&#10;                                status = status,&#10;                                priority = TaskPriority.MEDIUM,&#10;                                assignedTo = emptyList(),&#10;                                dependencies = emptyList(),&#10;                                category = TaskCategory.OTHER,&#10;                                estimatedHours = null,&#10;                                actualHours = null,&#10;                                projectId = projectId&#10;                            )&#10;                        )&#10;                    }&#10;                },&#10;                enabled = name.isNotBlank() &amp;&amp; startDate.isNotBlank() &amp;&amp; endDate.isNotBlank()&#10;            ) { Text(&quot;Crear&quot;) }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) { Text(&quot;Cancelar&quot;) }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun DropdownMenuBox(&#10;    options: List&lt;String&gt;,&#10;    selectedOption: String,&#10;    onOptionSelected: (String) -&gt; Unit,&#10;    label: String&#10;) {&#10;    var expanded by remember { mutableStateOf(false) }&#10;    Column {&#10;        Text(label, fontWeight = FontWeight.SemiBold, fontSize = 14.sp)&#10;        Box {&#10;            OutlinedTextField(&#10;                value = selectedOption,&#10;                onValueChange = {},&#10;                readOnly = true,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable { expanded = true },&#10;                label = { Text(label) }&#10;            )&#10;            DropdownMenu(&#10;                expanded = expanded,&#10;                onDismissRequest = { expanded = false }&#10;            ) {&#10;                options.forEach { option -&gt;&#10;                    DropdownMenuItem(&#10;                        text = { Text(option) },&#10;                        onClick = {&#10;                            onOptionSelected(option)&#10;                            expanded = false&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProjectBlueprintsTab(projectId: String) {&#10;    val context = LocalContext.current&#10;    val firestore = remember { FirebaseFirestore.getInstance() }&#10;    var showUploadDialog by remember { mutableStateOf(false) }&#10;    var selectedFileUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var fileName by remember { mutableStateOf(&quot;&quot;) }&#10;    var fileType by remember { mutableStateOf(&quot;&quot;) }&#10;    var fileBase64 by remember { mutableStateOf(&quot;&quot;) }&#10;    var uploadDate by remember { mutableStateOf(SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(Date())) }&#10;    var version by remember { mutableStateOf(&quot;&quot;) }&#10;    var scale by remember { mutableStateOf(&quot;&quot;) }&#10;    var planType by remember { mutableStateOf(&quot;&quot;) }&#10;    var showFilePicker by remember { mutableStateOf(false) }&#10;    var blueprints by remember { mutableStateOf(listOf&lt;SimpleBlueprint&gt;()) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;&#10;    // Leer planos de Firestore&#10;    LaunchedEffect(projectId) {&#10;        isLoading = true&#10;        firestore.collection(&quot;blueprints&quot;)&#10;            .whereEqualTo(&quot;projectId&quot;, projectId)&#10;            .addSnapshotListener { snapshot, _ -&gt;&#10;                if (snapshot != null) {&#10;                    blueprints = snapshot.documents.mapNotNull { doc -&gt;&#10;                        doc.toObject(SimpleBlueprint::class.java)?.copy(id = doc.id)&#10;                    }&#10;                }&#10;                isLoading = false&#10;            }&#10;    }&#10;&#10;    val filePickerLauncher = rememberLauncherForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? -&gt;&#10;        if (uri != null) {&#10;            selectedFileUri = uri&#10;            val cursor = context.contentResolver.query(uri, null, null, null, null)&#10;            cursor?.use {&#10;                if (it.moveToFirst()) {&#10;                    fileName = it.getString(it.getColumnIndex(OpenableColumns.DISPLAY_NAME)) ?: &quot;&quot;&#10;                }&#10;            }&#10;            fileType = context.contentResolver.getType(uri) ?: &quot;&quot;&#10;            // Convertir a base64&#10;            val inputStream: InputStream? = context.contentResolver.openInputStream(uri)&#10;            val bytes = inputStream?.readBytes()&#10;            fileBase64 = if (bytes != null) Base64.encodeToString(bytes, Base64.DEFAULT) else &quot;&quot;&#10;        }&#10;    }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        Column(modifier = Modifier.fillMaxWidth().padding(16.dp)) {&#10;            Text(&quot;Planos del proyecto $projectId&quot;, fontWeight = FontWeight.Bold, fontSize = MaterialTheme.typography.titleLarge.fontSize)&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            if (isLoading) {&#10;                CircularProgressIndicator()&#10;            } else if (blueprints.isEmpty()) {&#10;                Text(&quot;No hay planos registrados.&quot;, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;            } else {&#10;                blueprints.forEach { blueprint -&gt;&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 8.dp),&#10;                        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)&#10;                    ) {&#10;                        Column(modifier = Modifier.padding(12.dp)) {&#10;                            Text(blueprint.name, fontWeight = FontWeight.Bold)&#10;                            Text(&quot;Tipo: ${blueprint.planType}&quot;, fontSize = 13.sp)&#10;                            Text(&quot;Versión: ${blueprint.version}&quot;, fontSize = 13.sp)&#10;                            Text(&quot;Escala: ${blueprint.scale}&quot;, fontSize = 13.sp)&#10;                            Text(&quot;Fecha: ${blueprint.uploadDate}&quot;, fontSize = 13.sp)&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            if (blueprint.type.startsWith(&quot;image&quot;)) {&#10;                                val bytes = Base64.decode(blueprint.base64, Base64.DEFAULT)&#10;                                val bitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.size)&#10;                                bitmap?.let {&#10;                                    Image(bitmap = it.asImageBitmap(), contentDescription = blueprint.name, modifier = Modifier.size(200.dp))&#10;                                }&#10;                            } else if (blueprint.type == &quot;application/pdf&quot;) {&#10;                                Button(onClick = {&#10;                                    // Lógica para descargar/abrir PDF desde base64&#10;                                }) {&#10;                                    Text(&quot;Descargar PDF: ${blueprint.name}&quot;)&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        // FAB en la esquina inferior derecha&#10;        FloatingActionButton(&#10;            onClick = { showUploadDialog = true },&#10;            containerColor = MaterialTheme.colorScheme.primary,&#10;            modifier = Modifier&#10;                .align(Alignment.BottomEnd)&#10;                .padding(24.dp)&#10;        ) {&#10;            Icon(Icons.Default.Add, contentDescription = &quot;Subir plano&quot;, tint = MaterialTheme.colorScheme.onPrimary)&#10;        }&#10;    }&#10;&#10;    if (showUploadDialog) {&#10;        AlertDialog(&#10;            onDismissRequest = { showUploadDialog = false },&#10;            title = { Text(&quot;Subir plano&quot;) },&#10;            text = {&#10;                Column {&#10;                    OutlinedTextField(value = fileName, onValueChange = { fileName = it }, label = { Text(&quot;Nombre del plano&quot;) })&#10;                    OutlinedTextField(value = planType, onValueChange = { planType = it }, label = { Text(&quot;Tipo de plano&quot;) })&#10;                    OutlinedTextField(value = version, onValueChange = { version = it }, label = { Text(&quot;Versión&quot;) })&#10;                    OutlinedTextField(value = scale, onValueChange = { scale = it }, label = { Text(&quot;Escala&quot;) })&#10;                    OutlinedTextField(value = uploadDate, onValueChange = { uploadDate = it }, label = { Text(&quot;Fecha de subida&quot;) })&#10;                    Button(onClick = { filePickerLauncher.launch(&quot;*/*&quot;) }, modifier = Modifier.padding(top = 8.dp)) {&#10;                        Text(&quot;Seleccionar archivo (imagen o PDF)&quot;)&#10;                    }&#10;                    if (selectedFileUri != null) {&#10;                        Text(&quot;Archivo seleccionado: $fileName&quot;, fontWeight = FontWeight.SemiBold)&#10;                    }&#10;                }&#10;            },&#10;            confirmButton = {&#10;                TextButton(onClick = {&#10;                    // Guardar en Firestore&#10;                    val newBlueprint = SimpleBlueprint(&#10;                        projectId = projectId,&#10;                        name = fileName,&#10;                        type = fileType,&#10;                        base64 = fileBase64,&#10;                        uploadDate = uploadDate,&#10;                        version = version,&#10;                        scale = scale,&#10;                        planType = planType&#10;                    )&#10;                    firestore.collection(&quot;blueprints&quot;).add(newBlueprint)&#10;                    showUploadDialog = false&#10;                    // Limpiar campos&#10;                    fileName = &quot;&quot;&#10;                    fileType = &quot;&quot;&#10;                    fileBase64 = &quot;&quot;&#10;                    version = &quot;&quot;&#10;                    scale = &quot;&quot;&#10;                    planType = &quot;&quot;&#10;                    selectedFileUri = null&#10;                }) {&#10;                    Text(&quot;Guardar&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showUploadDialog = false }) {&#10;                    Text(&quot;Cancelar&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;// --- Helpers para ProjectScheduleTab ---&#10;private fun mapTaskCategoryToProjectStatus(category: TaskCategory): ProjectStatus {&#10;    return when (category) {&#10;        TaskCategory.DESIGN -&gt; ProjectStatus.DESIGN&#10;        TaskCategory.PERMITS -&gt; ProjectStatus.PERMITS_REVIEW&#10;        TaskCategory.CONSTRUCTION, TaskCategory.INSPECTION -&gt; ProjectStatus.CONSTRUCTION&#10;        TaskCategory.DELIVERY -&gt; ProjectStatus.DELIVERY&#10;        else -&gt; ProjectStatus.DESIGN&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.app_mobile.ui.screens.management&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.material3.Tab&#10;import androidx.compose.material3.TabRow&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.*&#10;import com.example.app_mobile.data.repository.ManagementRepository&#10;import com.example.app_mobile.data.repository.CronogramaRepository&#10;import androidx.compose.runtime.collectAsState&#10;&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Image&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Scaffold&#10;&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.width&#10;&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.ui.text.font.FontStyle&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.material3.Card&#10;&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material3.Divider&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.CheckCircle&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.DatePickerDialog&#10;import androidx.compose.material3.rememberDatePickerState&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.app_mobile.ui.screens.cronograma.CronogramaViewModel&#10;import com.example.shared_domain.model.TaskCategory&#10;import com.example.shared_domain.model.TaskPriority&#10;import com.example.shared_domain.model.ScheduleTask&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.material3.LinearProgressIndicator&#10;import androidx.compose.material3.Slider&#10;import androidx.compose.material3.DropdownMenu&#10;import androidx.compose.material3.DropdownMenuItem&#10;import java.util.UUID&#10;import com.example.app_mobile.ui.screens.cronograma.components.CronogramaTimelineView&#10;import com.example.app_mobile.ui.screens.cronograma.components.ProjectPhaseSection&#10;import com.example.shared_domain.model.ProjectStatus&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.net.Uri&#10;import android.provider.OpenableColumns&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.material3.rememberDatePickerState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.asImageBitmap&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.core.net.toFile&#10;import java.io.InputStream&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;import android.util.Base64&#10;import android.graphics.BitmapFactory&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.CircularProgressIndicator&#10;&#10;// Modelo simple para plano&#10;@kotlinx.serialization.Serializable&#10;data class SimpleBlueprint(&#10;    val id: String = &quot;&quot;,&#10;    val projectId: String = &quot;&quot;,&#10;    val name: String = &quot;&quot;,&#10;    val type: String = &quot;&quot;, // &quot;image&quot; o &quot;pdf&quot;&#10;    val base64: String = &quot;&quot;,&#10;    val uploadDate: String = &quot;&quot;,&#10;    val version: String = &quot;&quot;,&#10;    val scale: String = &quot;&quot;,&#10;    val planType: String = &quot;&quot;&#10;)&#10;&#10;@Composable&#10;fun ProjectDetailScreen(&#10;    projectId: String,&#10;    managementRepository: ManagementRepository,&#10;    cronogramaRepository: CronogramaRepository,&#10;    // blueprintRepository: BlueprintRepository // Si tienes uno&#10;) {&#10;    var selectedTab by remember { mutableStateOf(0) }&#10;    val tabTitles = listOf(&quot;Información General&quot;, &quot;Cronograma&quot;, &quot;Planos&quot;)&#10;    var showAddTaskDialog by remember { mutableStateOf(false) }&#10;    var showAddBlueprintDialog by remember { mutableStateOf(false) }&#10;&#10;    // Inyectar el ViewModel de cronograma&#10;    val cronogramaViewModel: CronogramaViewModel = viewModel()&#10;&#10;    Scaffold(&#10;    ) { paddingValues -&gt;&#10;        Column(modifier = Modifier.padding(paddingValues)) {&#10;            TabRow(selectedTabIndex = selectedTab) {&#10;                tabTitles.forEachIndexed { index, title -&gt;&#10;                    Tab(&#10;                        selected = selectedTab == index,&#10;                        onClick = { selectedTab = index },&#10;                        text = { Text(title) }&#10;                    )&#10;                }&#10;            }&#10;            when (selectedTab) {&#10;                0 -&gt; ProjectGeneralInfoTab(projectId, managementRepository)&#10;                1 -&gt; ProjectScheduleTab(&#10;                    projectId = projectId,&#10;                    repository = cronogramaRepository,&#10;                    onCreateSchedule = { name, desc, start, end -&gt;&#10;                        cronogramaViewModel.createSchedule(&#10;                            projectId = projectId,&#10;                            name = name,&#10;                            description = desc,&#10;                            startDate = start,&#10;                            endDate = end,&#10;                            status = com.example.shared_domain.model.ProjectStatus.DESIGN&#10;                        )&#10;                    },&#10;                    onAddTask = { task -&gt;&#10;                        cronogramaViewModel.addTask(projectId, task)&#10;                    },&#10;                    onUpdateTaskStatus = { task, newStatus -&gt;&#10;                        cronogramaViewModel.updateTaskStatus(projectId, task, newStatus)&#10;                    }&#10;                )&#10;                2 -&gt; ProjectBlueprintsTab(projectId /*, blueprintRepository */)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Diálogo para agregar tarea&#10;    if (showAddTaskDialog) {&#10;        var taskName by remember { mutableStateOf(&quot;&quot;) }&#10;        var taskDescription by remember { mutableStateOf(&quot;&quot;) }&#10;        AlertDialog(&#10;            onDismissRequest = { showAddTaskDialog = false },&#10;            title = { Text(&quot;Agregar Nueva Tarea&quot;) },&#10;            text = {&#10;                Column {&#10;                    OutlinedTextField(&#10;                        value = taskName,&#10;                        onValueChange = { taskName = it },&#10;                        label = { Text(&quot;Nombre de la tarea&quot;) }&#10;                    )&#10;                    OutlinedTextField(&#10;                        value = taskDescription,&#10;                        onValueChange = { taskDescription = it },&#10;                        label = { Text(&quot;Descripción&quot;) }&#10;                    )&#10;                }&#10;            },&#10;            confirmButton = {&#10;                TextButton(onClick = {&#10;                    // TODO: Lógica para guardar la tarea&#10;                    showAddTaskDialog = false&#10;                }) {&#10;                    Text(&quot;Guardar&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showAddTaskDialog = false }) {&#10;                    Text(&quot;Cancelar&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;    // Diálogo para agregar plano&#10;    if (showAddBlueprintDialog) {&#10;        var blueprintName by remember { mutableStateOf(&quot;&quot;) }&#10;        var blueprintDescription by remember { mutableStateOf(&quot;&quot;) }&#10;        AlertDialog(&#10;            onDismissRequest = { showAddBlueprintDialog = false },&#10;            title = { Text(&quot;Agregar Nuevo Plano&quot;) },&#10;            text = {&#10;                Column {&#10;                    OutlinedTextField(&#10;                        value = blueprintName,&#10;                        onValueChange = { blueprintName = it },&#10;                        label = { Text(&quot;Nombre del plano&quot;) }&#10;                    )&#10;                    OutlinedTextField(&#10;                        value = blueprintDescription,&#10;                        onValueChange = { blueprintDescription = it },&#10;                        label = { Text(&quot;Descripción&quot;) }&#10;                    )&#10;                }&#10;            },&#10;            confirmButton = {&#10;                TextButton(onClick = {&#10;                    // TODO: Lógica para guardar el plano&#10;                    showAddBlueprintDialog = false&#10;                }) {&#10;                    Text(&quot;Guardar&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showAddBlueprintDialog = false }) {&#10;                    Text(&quot;Cancelar&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProjectGeneralInfoTab(projectId: String, repository: ManagementRepository) {&#10;    val projectsState by repository.projects.collectAsState()&#10;    val project = projectsState[projectId]&#10;    if (project != null) {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(vertical = 16.dp, horizontal = 12.dp),&#10;            shape = RoundedCornerShape(24.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;        ) {&#10;            Column(modifier = Modifier.padding(24.dp)) {&#10;                Row(verticalAlignment = Alignment.CenterVertically) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Home,&#10;                        contentDescription = null,&#10;                        tint = MaterialTheme.colorScheme.primary,&#10;                        modifier = Modifier.size(40.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;                    Column {&#10;                        Text(&#10;                            text = project.name,&#10;                            fontSize = 22.sp,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.onSurface&#10;                        )&#10;                        Text(&#10;                            text = project.status.name,&#10;                            fontSize = 14.sp,&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;                    }&#10;                }&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Text(&#10;                    text = project.description ?: &quot;Sin descripción&quot;,&#10;                    fontSize = 16.sp,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Divider()&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Column {&#10;                        Text(&quot;Cliente&quot;, fontWeight = FontWeight.SemiBold, fontSize = 14.sp)&#10;                        Text(project.client.name, fontSize = 15.sp)&#10;                    }&#10;                    Column {&#10;                        Text(&quot;Gestor&quot;, fontWeight = FontWeight.SemiBold, fontSize = 14.sp)&#10;                        Text(project.projectManager.name, fontSize = 15.sp)&#10;                    }&#10;                }&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Column {&#10;                        Text(&quot;Dirección&quot;, fontWeight = FontWeight.SemiBold, fontSize = 14.sp)&#10;                        Text(project.location.fullAddress, fontSize = 15.sp)&#10;                    }&#10;                    Column {&#10;                        Text(&quot;Ciudad&quot;, fontWeight = FontWeight.SemiBold, fontSize = 14.sp)&#10;                        Text(project.location.city, fontSize = 15.sp)&#10;                    }&#10;                }&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Column {&#10;                        Text(&quot;Presupuesto&quot;, fontWeight = FontWeight.SemiBold, fontSize = 14.sp)&#10;                        Text(project.budget?.formatted() ?: &quot;-&quot;, fontSize = 15.sp)&#10;                    }&#10;                    Column {&#10;                        Text(&quot;Progreso&quot;, fontWeight = FontWeight.SemiBold, fontSize = 14.sp)&#10;                        Text(&quot;${project.progressPercentage}%&quot;, fontSize = 15.sp)&#10;                    }&#10;                }&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Column {&#10;                        Text(&quot;Inicio&quot;, fontWeight = FontWeight.SemiBold, fontSize = 14.sp)&#10;                        Text(project.timeline.startDate, fontSize = 15.sp)&#10;                    }&#10;                    Column {&#10;                        Text(&quot;Entrega&quot;, fontWeight = FontWeight.SemiBold, fontSize = 14.sp)&#10;                        Text(project.timeline.endDate, fontSize = 15.sp)&#10;                    }&#10;                }&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Column {&#10;                        Text(&quot;Versión&quot;, fontWeight = FontWeight.SemiBold, fontSize = 14.sp)&#10;                        Text(&quot;${project.metadata.version}&quot;, fontSize = 15.sp)&#10;                    }&#10;                    Column {&#10;                        Text(&quot;Última actualización&quot;, fontWeight = FontWeight.SemiBold, fontSize = 14.sp)&#10;                        Text(project.metadata.updatedAt, fontSize = 15.sp)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    } else {&#10;        Text(&quot;Cargando información del proyecto...&quot;)&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProjectScheduleTab(&#10;    projectId: String,&#10;    repository: CronogramaRepository,&#10;    onCreateSchedule: (String, String, String, String) -&gt; Unit = { _, _, _, _ -&gt; },&#10;    onAddTask: (ScheduleTask) -&gt; Unit = {},&#10;    onUpdateTaskStatus: (ScheduleTask, String) -&gt; Unit = { _, _ -&gt; }&#10;) {&#10;    val schedulesState by repository.schedules.collectAsState()&#10;    val allTasksState by repository.tasks.collectAsState()&#10;    val schedule = schedulesState.values.find { it.projectId == projectId }&#10;    val tasks = allTasksState.values.filter { it.projectId == projectId }&#10;    var showCreateDialog by remember { mutableStateOf(false) }&#10;    var showAddTaskDialog by remember { mutableStateOf(false) }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        if (schedule != null) {&#10;            val completedTasks = tasks.count { it.status == &quot;ENTREGA&quot; || it.status == &quot;COMPLETADO&quot; }&#10;            val progress = if (tasks.isNotEmpty()) completedTasks.toFloat() / tasks.size else 0f&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp),&#10;                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.2f))&#10;            ) {&#10;                Column(modifier = Modifier.padding(16.dp)) {&#10;                    Row(verticalAlignment = Alignment.CenterVertically) {&#10;                        Icon(Icons.Default.DateRange, contentDescription = null, tint = MaterialTheme.colorScheme.primary)&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(schedule.name, fontWeight = FontWeight.Bold, fontSize = 20.sp)&#10;                    }&#10;                    Text(&quot;${schedule.startDate} a ${schedule.endDate}&quot;, fontSize = 14.sp, color = MaterialTheme.colorScheme.primary)&#10;                    schedule.description?.let {&#10;                        Text(it, fontSize = 13.sp, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                    }&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    LinearProgressIndicator(progress = { progress }, modifier = Modifier.fillMaxWidth(), color = MaterialTheme.colorScheme.primary)&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween&#10;                    ) {&#10;                        Text(&quot;Progreso: ${(progress * 100).toInt()}%&quot;, fontSize = 14.sp, color = MaterialTheme.colorScheme.primary)&#10;                        Text(&quot;Tareas: ${tasks.size}&quot;, fontSize = 14.sp, color = MaterialTheme.colorScheme.primary)&#10;                    }&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    // Mostrar mensaje si no hay tareas&#10;                    if (tasks.isEmpty()) {&#10;                        Text(&#10;                            &quot;No hay tareas asociadas a este cronograma.&quot;,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            fontStyle = FontStyle.Italic,&#10;                            modifier = Modifier.padding(vertical = 24.dp)&#10;                        )&#10;                    } else {&#10;                        // Agrupar tareas por fase y mostrar con swipe&#10;                        val tasksByPhase = tasks.groupBy { mapTaskCategoryToProjectStatus(it.category) }.toSortedMap(compareBy { it.ordinal })&#10;                        tasksByPhase.forEach { (phase, phaseTasks) -&gt;&#10;                            ProjectPhaseSection(&#10;                                phase = phase,&#10;                                tasks = phaseTasks,&#10;                                onTaskClick = {},&#10;                                onTaskStatusUpdate = onUpdateTaskStatus,&#10;                                onTaskProgressUpdate = { _, _ -&gt; }&#10;                            )&#10;                            Spacer(modifier = Modifier.height(12.dp))&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            // FAB para agregar tarea&#10;            FloatingActionButton(&#10;                onClick = { showAddTaskDialog = true },&#10;                containerColor = MaterialTheme.colorScheme.primary,&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomEnd)&#10;                    .padding(24.dp)&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Agregar tarea&quot;, tint = Color.White)&#10;            }&#10;            if (showAddTaskDialog) {&#10;                AddTaskDialog(&#10;                    onDismiss = { showAddTaskDialog = false },&#10;                    onCreate = { task -&gt;&#10;                        onAddTask(task)&#10;                        showAddTaskDialog = false&#10;                    },&#10;                    projectId = projectId&#10;                )&#10;            }&#10;        } else {&#10;            // Mostrar mensaje y FAB para crear cronograma&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .align(Alignment.Center),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&quot;No hay cronograma para este proyecto.&quot;, modifier = Modifier.padding(16.dp))&#10;                Button(onClick = { showCreateDialog = true }) {&#10;                    Text(&quot;Crear cronograma&quot;)&#10;                }&#10;            }&#10;            if (showCreateDialog) {&#10;                CreateScheduleDialog(&#10;                    onDismiss = { showCreateDialog = false },&#10;                    onCreate = { name, desc, start, end -&gt;&#10;                        onCreateSchedule(name, desc, start, end)&#10;                        showCreateDialog = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CreateScheduleDialog(&#10;    onDismiss: () -&gt; Unit,&#10;    onCreate: (String, String, String, String) -&gt; Unit&#10;) {&#10;    var name by remember { mutableStateOf(&quot;&quot;) }&#10;    var desc by remember { mutableStateOf(&quot;&quot;) }&#10;    var startDate by remember { mutableStateOf(&quot;&quot;) }&#10;    var endDate by remember { mutableStateOf(&quot;&quot;) }&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { Text(&quot;Nuevo Cronograma&quot;) },&#10;        text = {&#10;            Column {&#10;                OutlinedTextField(&#10;                    value = name,&#10;                    onValueChange = { name = it },&#10;                    label = { Text(&quot;Nombre&quot;) },&#10;                    singleLine = true&#10;                )&#10;                OutlinedTextField(&#10;                    value = desc,&#10;                    onValueChange = { desc = it },&#10;                    label = { Text(&quot;Descripción&quot;) },&#10;                    singleLine = false&#10;                )&#10;                OutlinedTextField(&#10;                    value = startDate,&#10;                    onValueChange = { startDate = it },&#10;                    label = { Text(&quot;Fecha inicio (yyyy-MM-dd)&quot;) },&#10;                    singleLine = true,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(top = 8.dp)&#10;                )&#10;                OutlinedTextField(&#10;                    value = endDate,&#10;                    onValueChange = { endDate = it },&#10;                    label = { Text(&quot;Fecha fin (yyyy-MM-dd)&quot;) },&#10;                    singleLine = true,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(top = 8.dp)&#10;                )&#10;            }&#10;        },&#10;        confirmButton = {&#10;            TextButton(&#10;                onClick = {&#10;                    if (name.isNotBlank() &amp;&amp; startDate.isNotBlank() &amp;&amp; endDate.isNotBlank()) {&#10;                        onCreate(name, desc, startDate, endDate)&#10;                    }&#10;                },&#10;                enabled = name.isNotBlank() &amp;&amp; startDate.isNotBlank() &amp;&amp; endDate.isNotBlank()&#10;            ) { Text(&quot;Crear&quot;) }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) { Text(&quot;Cancelar&quot;) }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun AddTaskDialog(&#10;    onDismiss: () -&gt; Unit,&#10;    onCreate: (ScheduleTask) -&gt; Unit,&#10;    projectId: String&#10;) {&#10;    var name by remember { mutableStateOf(&quot;&quot;) }&#10;    var desc by remember { mutableStateOf(&quot;&quot;) }&#10;    var startDate by remember { mutableStateOf(&quot;&quot;) }&#10;    var endDate by remember { mutableStateOf(&quot;&quot;) }&#10;    var status by remember { mutableStateOf(&quot;DISEÑO&quot;) }&#10;    val statusOptions = listOf(&quot;DISEÑO&quot;, &quot;REVISION_PERMISOS&quot;, &quot;CONSTRUCCION&quot;, &quot;ENTREGA&quot;)&#10;    var progress by remember { mutableStateOf(0f) }&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { Text(&quot;Nueva Tarea&quot;) },&#10;        text = {&#10;            Column {&#10;                OutlinedTextField(&#10;                    value = name,&#10;                    onValueChange = { name = it },&#10;                    label = { Text(&quot;Nombre&quot;) },&#10;                    singleLine = true&#10;                )&#10;                OutlinedTextField(&#10;                    value = desc,&#10;                    onValueChange = { desc = it },&#10;                    label = { Text(&quot;Descripción&quot;) },&#10;                    singleLine = false&#10;                )&#10;                OutlinedTextField(&#10;                    value = startDate,&#10;                    onValueChange = { startDate = it },&#10;                    label = { Text(&quot;Fecha inicio (yyyy-MM-dd)&quot;) },&#10;                    singleLine = true&#10;                )&#10;                OutlinedTextField(&#10;                    value = endDate,&#10;                    onValueChange = { endDate = it },&#10;                    label = { Text(&quot;Fecha fin (yyyy-MM-dd)&quot;) },&#10;                    singleLine = true&#10;                )&#10;                // Selector de estado/fase&#10;                DropdownMenuBox(&#10;                    options = statusOptions,&#10;                    selectedOption = status,&#10;                    onOptionSelected = { status = it },&#10;                    label = &quot;Fase/Estado&quot;&#10;                )&#10;                // Barra de progreso individual&#10;                Text(&quot;Progreso: ${(progress * 100).toInt()}%&quot;, fontSize = 13.sp)&#10;                Slider(&#10;                    value = progress,&#10;                    onValueChange = { progress = it },&#10;                    valueRange = 0f..1f,&#10;                    steps = 3&#10;                )&#10;            }&#10;        },&#10;        confirmButton = {&#10;            TextButton(&#10;                onClick = {&#10;                    if (name.isNotBlank() &amp;&amp; startDate.isNotBlank() &amp;&amp; endDate.isNotBlank()) {&#10;                        onCreate(&#10;                            ScheduleTask(&#10;                                id = UUID.randomUUID().toString(),&#10;                                name = name,&#10;                                description = desc,&#10;                                startDate = startDate,&#10;                                endDate = endDate,&#10;                                progress = progress.toDouble(),&#10;                                status = status,&#10;                                priority = TaskPriority.MEDIUM,&#10;                                assignedTo = emptyList(),&#10;                                dependencies = emptyList(),&#10;                                category = TaskCategory.OTHER,&#10;                                estimatedHours = null,&#10;                                actualHours = null,&#10;                                projectId = projectId&#10;                            )&#10;                        )&#10;                    }&#10;                },&#10;                enabled = name.isNotBlank() &amp;&amp; startDate.isNotBlank() &amp;&amp; endDate.isNotBlank()&#10;            ) { Text(&quot;Crear&quot;) }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) { Text(&quot;Cancelar&quot;) }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun DropdownMenuBox(&#10;    options: List&lt;String&gt;,&#10;    selectedOption: String,&#10;    onOptionSelected: (String) -&gt; Unit,&#10;    label: String&#10;) {&#10;    var expanded by remember { mutableStateOf(false) }&#10;    Column {&#10;        Text(label, fontWeight = FontWeight.SemiBold, fontSize = 14.sp)&#10;        Box {&#10;            OutlinedTextField(&#10;                value = selectedOption,&#10;                onValueChange = {},&#10;                readOnly = true,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable { expanded = true },&#10;                label = { Text(label) }&#10;            )&#10;            DropdownMenu(&#10;                expanded = expanded,&#10;                onDismissRequest = { expanded = false }&#10;            ) {&#10;                options.forEach { option -&gt;&#10;                    DropdownMenuItem(&#10;                        text = { Text(option) },&#10;                        onClick = {&#10;                            onOptionSelected(option)&#10;                            expanded = false&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProjectBlueprintsTab(projectId: String) {&#10;    val context = LocalContext.current&#10;    val firestore = remember { FirebaseFirestore.getInstance() }&#10;    var showUploadDialog by remember { mutableStateOf(false) }&#10;    var selectedFileUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var fileName by remember { mutableStateOf(&quot;&quot;) }&#10;    var fileType by remember { mutableStateOf(&quot;&quot;) }&#10;    var fileBase64 by remember { mutableStateOf(&quot;&quot;) }&#10;    var uploadDate by remember { mutableStateOf(SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(Date())) }&#10;    var version by remember { mutableStateOf(&quot;&quot;) }&#10;    var scale by remember { mutableStateOf(&quot;&quot;) }&#10;    var planType by remember { mutableStateOf(&quot;&quot;) }&#10;    var showFilePicker by remember { mutableStateOf(false) }&#10;    var blueprints by remember { mutableStateOf(listOf&lt;SimpleBlueprint&gt;()) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;&#10;    // Leer planos de Firestore&#10;    LaunchedEffect(projectId) {&#10;        isLoading = true&#10;        firestore.collection(&quot;blueprints&quot;)&#10;            .whereEqualTo(&quot;projectId&quot;, projectId)&#10;            .addSnapshotListener { snapshot, _ -&gt;&#10;                if (snapshot != null) {&#10;                    blueprints = snapshot.documents.mapNotNull { doc -&gt;&#10;                        doc.toObject(SimpleBlueprint::class.java)?.copy(id = doc.id)&#10;                    }&#10;                }&#10;                isLoading = false&#10;            }&#10;    }&#10;&#10;    val filePickerLauncher = rememberLauncherForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? -&gt;&#10;        if (uri != null) {&#10;            selectedFileUri = uri&#10;            val cursor = context.contentResolver.query(uri, null, null, null, null)&#10;            cursor?.use {&#10;                if (it.moveToFirst()) {&#10;                    fileName = it.getString(it.getColumnIndex(OpenableColumns.DISPLAY_NAME)) ?: &quot;&quot;&#10;                }&#10;            }&#10;            fileType = context.contentResolver.getType(uri) ?: &quot;&quot;&#10;            // Convertir a base64&#10;            val inputStream: InputStream? = context.contentResolver.openInputStream(uri)&#10;            val bytes = inputStream?.readBytes()&#10;            fileBase64 = if (bytes != null) Base64.encodeToString(bytes, Base64.DEFAULT) else &quot;&quot;&#10;        }&#10;    }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        Column(modifier = Modifier.fillMaxWidth().padding(16.dp)) {&#10;            Text(&quot;Planos del proyecto $projectId&quot;, fontWeight = FontWeight.Bold, fontSize = MaterialTheme.typography.titleLarge.fontSize)&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            if (isLoading) {&#10;                CircularProgressIndicator()&#10;            } else if (blueprints.isEmpty()) {&#10;                Text(&quot;No hay planos registrados.&quot;, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;            } else {&#10;                blueprints.forEach { blueprint -&gt;&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 8.dp),&#10;                        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)&#10;                    ) {&#10;                        Column(modifier = Modifier.padding(12.dp)) {&#10;                            Text(blueprint.name, fontWeight = FontWeight.Bold)&#10;                            Text(&quot;Tipo: ${blueprint.planType}&quot;, fontSize = 13.sp)&#10;                            Text(&quot;Versión: ${blueprint.version}&quot;, fontSize = 13.sp)&#10;                            Text(&quot;Escala: ${blueprint.scale}&quot;, fontSize = 13.sp)&#10;                            Text(&quot;Fecha: ${blueprint.uploadDate}&quot;, fontSize = 13.sp)&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            if (blueprint.type.startsWith(&quot;image&quot;)) {&#10;                                val bytes = Base64.decode(blueprint.base64, Base64.DEFAULT)&#10;                                val bitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.size)&#10;                                bitmap?.let {&#10;                                    Image(bitmap = it.asImageBitmap(), contentDescription = blueprint.name, modifier = Modifier.size(200.dp))&#10;                                }&#10;                            } else if (blueprint.type == &quot;application/pdf&quot;) {&#10;                                Button(onClick = {&#10;                                    // Lógica para descargar/abrir PDF desde base64&#10;                                }) {&#10;                                    Text(&quot;Descargar PDF: ${blueprint.name}&quot;)&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        // FAB en la esquina inferior derecha&#10;        FloatingActionButton(&#10;            onClick = { showUploadDialog = true },&#10;            containerColor = MaterialTheme.colorScheme.primary,&#10;            modifier = Modifier&#10;                .align(Alignment.BottomEnd)&#10;                .padding(24.dp)&#10;        ) {&#10;            Icon(Icons.Default.Add, contentDescription = &quot;Subir plano&quot;, tint = MaterialTheme.colorScheme.onPrimary)&#10;        }&#10;    }&#10;&#10;    if (showUploadDialog) {&#10;        AlertDialog(&#10;            onDismissRequest = { showUploadDialog = false },&#10;            title = { Text(&quot;Subir plano&quot;) },&#10;            text = {&#10;                Column {&#10;                    OutlinedTextField(value = fileName, onValueChange = { fileName = it }, label = { Text(&quot;Nombre del plano&quot;) })&#10;                    OutlinedTextField(value = planType, onValueChange = { planType = it }, label = { Text(&quot;Tipo de plano&quot;) })&#10;                    OutlinedTextField(value = version, onValueChange = { version = it }, label = { Text(&quot;Versión&quot;) })&#10;                    OutlinedTextField(value = scale, onValueChange = { scale = it }, label = { Text(&quot;Escala&quot;) })&#10;                    OutlinedTextField(value = uploadDate, onValueChange = { uploadDate = it }, label = { Text(&quot;Fecha de subida&quot;) })&#10;                    Button(onClick = { filePickerLauncher.launch(&quot;*/*&quot;) }, modifier = Modifier.padding(top = 8.dp)) {&#10;                        Text(&quot;Seleccionar archivo (imagen o PDF)&quot;)&#10;                    }&#10;                    if (selectedFileUri != null) {&#10;                        Text(&quot;Archivo seleccionado: $fileName&quot;, fontWeight = FontWeight.SemiBold)&#10;                    }&#10;                }&#10;            },&#10;            confirmButton = {&#10;                TextButton(onClick = {&#10;                    // Guardar en Firestore&#10;                    val newBlueprint = SimpleBlueprint(&#10;                        projectId = projectId,&#10;                        name = fileName,&#10;                        type = fileType,&#10;                        base64 = fileBase64,&#10;                        uploadDate = uploadDate,&#10;                        version = version,&#10;                        scale = scale,&#10;                        planType = planType&#10;                    )&#10;                    firestore.collection(&quot;blueprints&quot;).add(newBlueprint)&#10;                    showUploadDialog = false&#10;                    // Limpiar campos&#10;                    fileName = &quot;&quot;&#10;                    fileType = &quot;&quot;&#10;                    fileBase64 = &quot;&quot;&#10;                    version = &quot;&quot;&#10;                    scale = &quot;&quot;&#10;                    planType = &quot;&quot;&#10;                    selectedFileUri = null&#10;                }) {&#10;                    Text(&quot;Guardar&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showUploadDialog = false }) {&#10;                    Text(&quot;Cancelar&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;// --- Helpers para ProjectScheduleTab ---&#10;private fun mapTaskCategoryToProjectStatus(category: TaskCategory): ProjectStatus {&#10;    return when (category) {&#10;        TaskCategory.DESIGN -&gt; ProjectStatus.DESIGN&#10;        TaskCategory.PERMITS -&gt; ProjectStatus.PERMITS_REVIEW&#10;        TaskCategory.CONSTRUCTION, TaskCategory.INSPECTION -&gt; ProjectStatus.CONSTRUCTION&#10;        TaskCategory.DELIVERY -&gt; ProjectStatus.DELIVERY&#10;        else -&gt; ProjectStatus.DESIGN&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>